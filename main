import model.Dish;
import service.DishService;

import java.util.List;
import java.util.Scanner;

public class MainApp {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        DishService service = new DishService();

        while (true) {
            System.out.println("========== Food Management System ==========");
            System.out.println("1. Add Dish");
            System.out.println("2. Get All Dishes");
            System.out.println("3. Get Dish By Id");
            System.out.println("4. Update Dish");
            System.out.println("5. Delete Dish");
            System.out.println("6. Sort By Popularity");
            System.out.println("7. Filter By Cuisine");
            System.out.println("8. Filter By Vegetarian");
            System.out.println("9. Search Dish By Name");
            System.out.println("10. Exit");
            System.out.print("Enter your choice: ");
            int choice = Integer.parseInt(sc.nextLine());

            switch (choice) {
                case 1:
                    // Add
                    System.out.print("Dish Id : ");
                    String id = sc.nextLine();
                    System.out.print("Name : ");
                    String name = sc.nextLine();
                    System.out.print("Cuisine : ");
                    String cuisine = sc.nextLine();
                    System.out.print("Price : ");
                    double price = Double.parseDouble(sc.nextLine());
                    System.out.print("Vegetarian (true/false): ");
                    boolean veg = Boolean.parseBoolean(sc.nextLine());
                    System.out.print("Popularity (0–10): ");
                    int popularity = Integer.parseInt(sc.nextLine());

                    Dish dish = new Dish(id, name, cuisine, price, veg, popularity);
                    service.addDish(dish);
                    System.out.println("Dish added.");
                    break;

                case 2:
                    // Get all
                    service.getAllDishes().forEach(System.out::println);
                    break;

                case 3:
                    // Get by Id
                    System.out.print("Enter Dish Id: ");
                    Dish d = service.getDishById(sc.nextLine());
                    System.out.println(d != null ? d : "Dish not found");
                    break;

                case 4:
                    // Update
                    System.out.print("Enter Dish Id to update: ");
                    String updateId = sc.nextLine();
                    System.out.print("New Name: ");
                    String newName = sc.nextLine();
                    System.out.print("New Cuisine: ");
                    String newCuisine = sc.nextLine();
                    System.out.print("New Price: ");
                    double newPrice = Double.parseDouble(sc.nextLine());
                    System.out.print("Vegetarian (true/false): ");
                    boolean newVeg = Boolean.parseBoolean(sc.nextLine());
                    System.out.print("Popularity (0–10): ");
                    int newPopularity = Integer.parseInt(sc.nextLine());

                    Dish updatedDish = new Dish(updateId, newName, newCuisine, newPrice, newVeg, newPopularity);
                    service.updateDish(updateId, updatedDish);
                    System.out.println("Dish updated.");
                    break;

                case 5:
                    // Delete
                    System.out.print("Enter Dish Id to delete: ");
                    System.out.println(service.deleteDish(sc.nextLine()) ? "Deleted" : "Dish not found");
                    break;

                case 6:
                    // Sort By Popularity
                    service.sortByPopularity().forEach(System.out::println);
                    break;

                case 7:
                    // Filter By Cuisine
                    System.out.print("Enter Cuisine: ");
                    service.filterByCuisine(sc.nextLine()).forEach(System.out::println);
                    break;

                case 8:
                    // Filter By Vegetarian
                    System.out.print("Vegetarian? (true/false): ");
                    boolean isVeg = Boolean.parseBoolean(sc.nextLine());
                    service.filterByVegetarian(isVeg).forEach(System.out::println);
                    break;

                case 9:
                    // Search Dish By Name
                    System.out.print("Enter Keyword: ");
                    service.searchDishByName(sc.nextLine()).forEach(System.out::println);
                    break;

                case 10:
                    System.out.println("Exiting...");
                    System.exit(0);
                    break;

                default:
                    System.out.println("Invalid choice!");
            }
            System.out.println();
        }
    }
}
